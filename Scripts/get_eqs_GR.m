(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* These are the necessary global variables to set before running the code *)


(** Paths **)
$CodeDirectory=FileNameJoin[{NotebookDirectory[],".."}];
$EquationsDirectory=FileNameJoin[{$CodeDirectory,"Equations"}]<>$PathnameSeparator;


(**
Theories implemented (all of them include a metric and matter):
 - GR: General Relativity;
  - ST: scalar-tensor (beyond Horndeski);
  - ALL: import all the theories implemented.
**)
$Theory="GR";


(**
Type of metric. For now only FRW Flat is implemented.
**)
$Metric="FRW Flat";


(** Import scalar/vector/tensor perturbations **)
$ScalarPertsQ=True;
$VectorPertsQ=True;
$TensorPertsQ=True;


(**
 Import decomposition rules from external file.
Leave an empty string to use default rules.
**)
$ImportDecompositionRules = "";


(** Import module with Class definitions and conversions **)
$ToClass=False;


$HistoryLength=3


Get[FileNameJoin[{$CodeDirectory,"xSVT.wl"}]]


ImportEquations[$EquationsDirectory]


GetIndicesOfVBundle[TangentM4,14]


DefTensor[ChristoffelCDP[\[Alpha],-\[Mu],-\[Nu]],{M1,M3,M4}]
DefTensorPerturbation[pertChristoffelCDP[LI[order],\[Alpha],-\[Mu],-\[Nu]],ChristoffelCDP[\[Alpha],-\[Mu],-\[Nu]],{M1,M3,M4}]


DefTensor[RicciCDP[-\[Mu],-\[Nu]],{M1,M3,M4}]
DefTensorPerturbation[pertRicciCDP[LI[order],-\[Mu],-\[Nu]],RicciCDP[-\[Mu],-\[Nu]],{M1,M3,M4}]


DefTensor[RicciScalarCDP[],{M1,M3,M4}]
DefTensorPerturbation[pertRicciScalarCDP[LI[order]],RicciScalarCDP[],{M1,M3,M4}]


DefTensor[RiemannCDP[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],{M1,M3,M4}]
DefTensorPerturbation[pertRiemannCDP[LI[order],-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],RiemannCDP[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],{M1,M3,M4}]


velocitycov[\[Mu]] velocitycov[-\[Mu]]+1
GRToBuildingBlocks[%,CD];
SplitSpaceTime[%,{}];
%/scale[]^2 //.$SVTDecompositionRules[[1]][[{15,16,17,18}]] // Expand


velocitycov[\[Mu]] velocitycov[-\[Mu]]+1
SVTPerturbation[%,1];
GRToBuildingBlocks[%,CD]
SplitSpaceTime[%,{}];
%/2/scale[] //.$SVTDecompositionRules[[1]][[{15,16,17,18,31}]] // Expand


velocitycov[\[Mu]] velocitycov[-\[Mu]]+1
SVTPerturbation[%,2];
GRToBuildingBlocks[%,CD]
SplitSpaceTime[%,{}];
%/2/scale[] //.$SVTDecompositionRules[[1]][[{15,16,17,18,31}]] // Expand


velocitycov[\[Mu]] velocitycov[-\[Mu]]+1
SVTPerturbation[%,3];
GRToBuildingBlocks[%,CD]
SplitSpaceTime[%,{}];
%/2/scale[] //.$SVTDecompositionRules[[1]][[{15,16,17,18,31}]] // Expand


tmp=Lgravity+Lmatter // SeparateMetric[] // ToCanonical // ReplaceDummies;
tmp=ExpandPerturbation[Perturbation[tmp,1]] // NoScalar // ToCanonical;


-2 VarD[pertmetricg[LI[1],\[Mu],\[Nu]],CD][tmp]/Sqrt[-Detmetricg[]] //.delta[-LI[1],LI[1]]:>1;
EQmetric=%+EQmattertoscalar // ToCanonical // SeparateMetric[]
EQmetric // SVTExport


EQmatter = CD[-\[Nu]]@stressenergy[-\[Mu], \[Nu]] // ToCanonical // SeparateMetric[]
EQmatter // SVTExport


order=0;


SetOptions[SVTDecomposition,Verbose->True,StoreResultQ->True,ListMethod->"SamePerts"]


SVTDecomposition[ChristoffelCD[\[Alpha],-\[Mu],-\[Nu]],order,{\[Alpha]->a,\[Mu]->b,\[Nu]->c},StoreName->ChristoffelCDP[a,-b,-c]];


SVTDecomposition[ChristoffelCD[\[Alpha],-\[Mu],-\[Nu]],order,{\[Alpha]->a,\[Mu]->b,\[Nu]->i},StoreName->ChristoffelCDP[a,-b,-i]];
tmp=ChristoffelCDP[a,-b,-i] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{ChristoffelCDP[a,-i,-b],Evaluate[tmp]}]];


SVTDecomposition[ChristoffelCD[\[Alpha],-\[Mu],-\[Nu]],order,{\[Alpha]->a,\[Mu]->i,\[Nu]->j},StoreName->ChristoffelCDP[a,-i,-j]];


SVTDecomposition[ChristoffelCD[\[Alpha],-\[Mu],-\[Nu]],order,{\[Alpha]->i,\[Mu]->a,\[Nu]->b},StoreName->ChristoffelCDP[i,-a,-b]];


SVTDecomposition[ChristoffelCD[\[Alpha],-\[Mu],-\[Nu]],order,{\[Alpha]->i,\[Mu]->a,\[Nu]->j},StoreName->ChristoffelCDP[i,-a,-j]];
tmp=ChristoffelCDP[i,-a,-j] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{ChristoffelCDP[i,-j,-a],Evaluate[tmp]}]];


SVTDecomposition[ChristoffelCD[\[Alpha],-\[Mu],-\[Nu]],order,{\[Alpha]->i,\[Mu]->j,\[Nu]->k},StoreName->ChristoffelCDP[i,-j,-k]];


SVTDecomposition[RiemannCD[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],order,{\[Mu]->a,\[Nu]->b,\[Alpha]->c,\[Beta]->d},StoreName->RiemannCDP[-a,-b,-c,-d]];


SVTDecomposition[RiemannCD[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],order,{\[Mu]->a,\[Nu]->b,\[Alpha]->c,\[Beta]->i},StoreName->RiemannCDP[-a,-b,-c,-i]];
tmp=RiemannCDP[-a,-b,-c,-i] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{RiemannCDP[-a,-b,-i,-c],Evaluate[-tmp]}],
	MakeRule[{RiemannCDP[-c,-i,-a,-b],Evaluate[tmp]}],
	MakeRule[{RiemannCDP[-i,-c,-a,-b],Evaluate[-tmp]}]];


SVTDecomposition[RiemannCD[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],order,{\[Mu]->a,\[Nu]->i,\[Alpha]->b,\[Beta]->j},StoreName->RiemannCDP[-a,-i,-b,-j]];
tmp=RiemannCDP[-a,-i,-b,-j] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{RiemannCDP[-a,-i,-j,-b],Evaluate[-tmp]}],
	MakeRule[{RiemannCDP[-i,-a,-b,-j],Evaluate[-tmp]}],
	MakeRule[{RiemannCDP[-i,-a,-j,-b],Evaluate[tmp]}]];


SVTDecomposition[RiemannCD[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],order,{\[Mu]->a,\[Nu]->b,\[Alpha]->i,\[Beta]->j},StoreName->RiemannCDP[-a,-b,-i,-j]];
tmp=RiemannCDP[-a,-b,-i,-j] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{RiemannCDP[-i,-j,-a,-b],Evaluate[tmp]}]];


SVTDecomposition[RiemannCD[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],order,{\[Mu]->a,\[Nu]->i,\[Alpha]->j,\[Beta]->k},StoreName->RiemannCDP[-a,-i,-j,-k]];
tmp=RiemannCDP[-a,-i,-j,-k] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{RiemannCDP[-i,-a,-j,-k],Evaluate[-tmp]}],
	MakeRule[{RiemannCDP[-j,-k,-a,-i],Evaluate[tmp]}],
	MakeRule[{RiemannCDP[-j,-k,-i,-a],Evaluate[-tmp]}]];


SVTDecomposition[RiemannCD[-\[Mu],-\[Nu],-\[Alpha],-\[Beta]],order,{\[Mu]->i,\[Nu]->j,\[Alpha]->k,\[Beta]->l},StoreName->RiemannCDP[-i,-j,-k,-l]];


SVTDecomposition[metricg[\[Alpha],\[Beta]] RiemannCDP[-\[Alpha],-\[Mu],-\[Beta],-\[Nu]],order,{\[Mu]->a,\[Nu]->b},StoreName->RicciCDP[-a,-b]];


SVTDecomposition[metricg[\[Alpha],\[Beta]] RiemannCDP[-\[Alpha],-\[Mu],-\[Beta],-\[Nu]],order,{\[Mu]->a,\[Nu]->i},StoreName->RicciCDP[-a,-i]];
tmp=RicciCDP[-a,-i] //.$SVTDecompositionRules[[2]];
$SVTDecompositionRules[[2]]=Union[$SVTDecompositionRules[[2]],
	MakeRule[{RicciCDP[-i,-a],Evaluate[tmp]}]];


SVTDecomposition[metricg[\[Alpha],\[Beta]] RiemannCDP[-\[Alpha],-\[Mu],-\[Beta],-\[Nu]],order,{\[Mu]->i,\[Nu]->j},StoreName->RicciCDP[-i,-j]];


SVTDecomposition[metricg[\[Mu],\[Nu]] RicciCDP[-\[Mu],-\[Nu]],order,{},StoreName->RicciScalarCDP[]];


SVTDecompositionRules=$SVTDecompositionRules;


SVTDecompositionRules // SVTExport


order=0


SetOptions[SVTDecomposition,Verbose->True,StoreResultQ->False,ListMethod->"SamePerts"]


SVTDecomposition[EQmetric,order,{\[Mu]->a,\[Nu]->b},Verbose->True];
EQback1=-%/scale[]^2 //Expand // SVTExpand // ReplaceDummies
EQback1 // SVTExport


SVTDecomposition[EQmetric,order,{\[Mu]->i,\[Nu]->j},Verbose->True];
EQback2=metric\[Delta][i,j] %/scale[]^2/3 //Expand // SVTExpand // ReplaceDummies
EQback2 // SVTExport


SVTDecomposition[EQmatter,order,{\[Mu]->a},Verbose->True];
EQback3=-% //Expand // SVTExpand // ReplaceDummies
EQback3 // SVTExport


order=1


SubBack[expr_] := Module[{tmp},
	tmp = expr //.Flatten[Solve[TimeDer[EQback2]==0,pprimehubbleC[]]];
	tmp = tmp //.Flatten[Solve[EQback3==0,primedensity[]]];
	tmp = tmp //.Flatten[Solve[EQback2==0,primehubbleC[]]];
	tmp = tmp //.Flatten[Solve[EQback1==0,Lambda]];
	tmp]


SetOptions[SVTDecomposition,Verbose->True,StoreResultQ->False,ListMethod->"SamePerts"]


tmp=EQmetric //.$StressEnergyDecomposition;
tmp=Listify[SVTPerturbation, tmp, {order}, ListMethod->"Part",PartLength->1,Verbose->True];
tmp // Length


tmp=tmp;
tmp=Listify[GRToBuildingBlocks, tmp, {CD,{ToMetric->False}}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=tmp//ContractMetric;
tmp=tmp//.RicciScalarCD[]:>RicciScalarCDP[];
tmp=tmp//.RicciCD[\[Mu]_,\[Nu]_]:>RicciCDP[\[Mu],\[Nu]];
tmp=tmp//.RiemannCD[\[Mu]_,\[Nu]_,\[Alpha]_,\[Beta]_]:>RiemannCDP[\[Mu],\[Nu],\[Alpha],\[Beta]];
tmp=tmp//.ChristoffelCD[\[Mu]_,\[Nu]_,\[Alpha]_]:>ChristoffelCDP[\[Mu],\[Nu],\[Alpha]];
EQmetrictmp=ToCanonical[tmp,UseMetricOnVBundle->{metric\[Delta]}] //SeparateMetric[];
EQmetrictmp // Length


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->a,\[Nu]->b},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric100=tmp;
EQmetric100 // SVTExport


tmp=-tmp/2/Mpl^2;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


EQfirst1=tmp;
CollectPerts[EQfirst1,{},Factor]
EQfirst1 // SVTExport


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->a,\[Nu]->i},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric10i=tmp;
EQmetric10i // SVTExport


tmp=tmp/Mpl^2;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


tmpi=tmp;
tmpi // Length


{time,tmp}=Timing[Map[PD[-j]@# &,tmpi]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpij}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j]# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst2}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[metric\[Delta][j,k] # &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-PD[-i]@# &,EQfirst2]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst5}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


CollectPerts[EQfirst2,{},Factor]
EQfirst2 // SVTExport


CollectPerts[EQfirst5,{},Factor]
EQfirst5 // SVTExport


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->i,\[Nu]->j},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric1ij=tmp;
EQmetric1ij // SVTExport


tmp=tmp/2/Mpl^2;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


tmpij=tmp;
tmpij // Length


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-l]@# &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijkl}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-m]@# &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijklm}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-n]@# &,tmpijklm]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijklmn}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,k] metric\[Delta][j,l] # &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,divdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j] metric\[Delta][k,l] # &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][j,k] metric\[Delta][l,m] # &,tmpijklm]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,lapdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-i]@# &,divdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,graddivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][k,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laplap}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,k] metric\[Delta][j,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,lapdivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j] metric\[Delta][k,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laplaptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-i]@PD[-j]@# &,laptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradgradlaptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-j]@# &,graddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradgraddivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-j]@# &,lapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradlapdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,EQfirst3}=Timing[Listify[SVTExpand,divdiv,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[-# &,laptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[3 # &,divdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst4}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[4 # &,lapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,graddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst6}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[4 # &,laplap]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 metric\[Delta][-i,-j] # &,lapdivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-2 metric\[Delta][-i,-j] # &,laplaptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 # &,gradgradlaptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 # &,gradgraddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,gradlapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,Evaluate[gradlapdiv //.-i->-k //.-j->-i //.-k->-j]]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst7}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


CollectPerts[EQfirst3,{},Factor]
EQfirst3 // SVTExport


CollectPerts[EQfirst4,{},Factor]
EQfirst4 // SVTExport


CollectPerts[EQfirst6,{},Factor]
EQfirst6 // SVTExport


CollectPerts[EQfirst7,{},Factor]
EQfirst7 // SVTExport


SetOptions[SVTDecomposition,SVTPerturbationQ->True,GRToBuildingBlocksQ->True,ListMethod->"SamePerts",Verbose->True]


tmp=SVTDecomposition[EQmatter,order,{\[Mu]->a},Verbose->True];
% // Length


EQmatter10=tmp;
EQmatter10 // SVTExport


tmp=-tmp;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


EQfirst8=tmp;
CollectPerts[%,{},Factor]
EQfirst8 // SVTExport


tmp=SVTDecomposition[EQmatter,order,{\[Mu]->i},Verbose->True];
% // Length


EQmatter1i=tmp;
EQmatter1i // SVTExport


tmp=-tmp;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


tmpi=tmp;
tmpi // Length


{time,tmp}=Timing[Map[PD[-j]@# &,tmpi]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpij}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j]# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst9}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[metric\[Delta][j,k] # &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-PD[-i]@# &,EQfirst9]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQfirst10}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


CollectPerts[EQfirst9,{},Factor]
EQfirst9 // SVTExport


CollectPerts[EQfirst10,{},Factor]
EQfirst10 // SVTExport


order=2


SubBack[expr_] := Module[{tmp},
	tmp = expr //.Flatten[Solve[TimeDer[EQback2]==0,pprimehubbleC[]]];
	tmp = tmp //.Flatten[Solve[EQback3==0,primedensity[]]];
	tmp = tmp //.Flatten[Solve[EQback2==0,primehubbleC[]]];
	tmp = tmp //.Flatten[Solve[EQback1==0,Lambda]];
	tmp]


SetOptions[SVTDecomposition,Verbose->True,StoreResultQ->False,ListMethod->"SamePerts"]


tmp=EQmetric //.$StressEnergyDecomposition;
tmp=Listify[SVTPerturbation, tmp, {order}, ListMethod->"Part",PartLength->1,Verbose->True];
tmp // Length


tmp=tmp;
tmp=Listify[GRToBuildingBlocks, tmp, {CD,{ToMetric->False}}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=tmp//ContractMetric;
tmp=tmp//.RicciScalarCD[]:>RicciScalarCDP[];
tmp=tmp//.RicciCD[\[Mu]_,\[Nu]_]:>RicciCDP[\[Mu],\[Nu]];
tmp=tmp//.RiemannCD[\[Mu]_,\[Nu]_,\[Alpha]_,\[Beta]_]:>RiemannCDP[\[Mu],\[Nu],\[Alpha],\[Beta]];
tmp=tmp//.ChristoffelCD[\[Mu]_,\[Nu]_,\[Alpha]_]:>ChristoffelCDP[\[Mu],\[Nu],\[Alpha]];
EQmetrictmp=ToCanonical[tmp,UseMetricOnVBundle->{metric\[Delta]}] //SeparateMetric[];
EQmetrictmp // Length


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->a,\[Nu]->b},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric200=tmp;
EQmetric200 // SVTExport


{time,tmp}=Timing[Map[SubBack[-#/2/Mpl^2] &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQsource1=-source1[LI[2]]-Evaluate[tmp//.pert_[LI[2],___]:>0];
EQsec1=-source1[LI[2]]+Evaluate[tmp//.pert_[LI[1],___]:>0];
EQsec1 // CollectPerts
EQsec1//Length
EQsource1//Length


EQsec1 // SVTExport
EQsource1 // SVTExport


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->a,\[Nu]->i},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric20i=tmp;
EQmetric20i // SVTExport


{time,tmp}=Timing[Map[SubBack[#/Mpl^2] &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


tmpi=tmp;
tmpi // Length


{time,tmp}=Timing[Map[PD[-j]@# &,tmpi]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpij}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j]# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec2}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[metric\[Delta][j,k] # &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-PD[-i]@# &,EQsec2]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec5}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQsource2=-source2[LI[2]]-Evaluate[EQsec2//.pert_[LI[2],___]:>0];
EQsec2=-source2[LI[2]]+Evaluate[EQsec2//.pert_[LI[1],___]:>0];
CollectPerts[EQsec2,{},Factor]
EQsec2//Length
EQsource2//Length


EQsource5=-source5[LI[2],-i]-Evaluate[EQsec5//.pert_[LI[2],___]:>0];
EQsec5=-source5[LI[2],-i]+Evaluate[EQsec5//.pert_[LI[1],___]:>0];
CollectPerts[EQsec5,{},Factor]
EQsec5//Length
EQsource5//Length


EQsec2 // SVTExport
EQsource2 // SVTExport


EQsec5 // SVTExport
EQsource5 // SVTExport


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->i,\[Nu]->j},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric2ij=tmp;
EQmetric2ij // SVTExport


{time,tmp}=Timing[Map[SubBack[#/2/Mpl^2] &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


tmpij=tmp;
tmpij // Length


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-l]@# &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijkl}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-m]@# &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijklm}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-n]@# &,tmpijklm]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijklmn}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,k] metric\[Delta][j,l] # &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,divdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j] metric\[Delta][k,l] # &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][j,k] metric\[Delta][l,m] # &,tmpijklm]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,lapdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-i]@# &,divdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,graddivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][k,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laplap}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,k] metric\[Delta][j,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,lapdivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j] metric\[Delta][k,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laplaptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-i]@PD[-j]@# &,laptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradgradlaptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-j]@# &,graddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradgraddivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-j]@# &,lapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradlapdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,EQsec3}=Timing[Listify[SVTExpand,divdiv,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[-# &,laptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[3 # &,divdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec4}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[4 # &,lapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,graddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec6}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[4 # &,laplap]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 metric\[Delta][-i,-j] # &,lapdivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-2 metric\[Delta][-i,-j] # &,laplaptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 # &,gradgradlaptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 # &,gradgraddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,gradlapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,Evaluate[gradlapdiv //.-i->-k //.-j->-i //.-k->-j]]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec7}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQsource3=-source3[LI[2]]-Evaluate[EQsec3//.pert_[LI[2],___]:>0];
EQsec3=-source3[LI[2]]+Evaluate[EQsec3//.pert_[LI[1],___]:>0];
CollectPerts[EQsec3,{},Factor]
EQsec3//Length
EQsource3//Length


EQsource4=-source4[LI[2]]-Evaluate[EQsec4//.pert_[LI[2],___]:>0];
EQsec4=-source4[LI[2]]+Evaluate[EQsec4//.pert_[LI[1],___]:>0];
CollectPerts[EQsec4,{},Factor]
EQsec4//Length
EQsource4//Length


EQsource6=-source6[LI[2],-i]-Evaluate[EQsec6//.pert_[LI[2],___]:>0];
EQsec6=-source6[LI[2],-i]+Evaluate[EQsec6//.pert_[LI[1],___]:>0];
CollectPerts[EQsec6,{},Factor]
EQsec6//Length
EQsource6//Length


EQsource7=-source7[LI[2],-i,-j]-Evaluate[EQsec7//.pert_[LI[2],___]:>0];
EQsec7=-source7[LI[2],-i,-j]+Evaluate[EQsec7//.pert_[LI[1],___]:>0];
CollectPerts[EQsec7,{},Factor]
EQsec7//Length
EQsource7//Length


EQsec3 // SVTExport
EQsource3 // SVTExport


EQsec4 // SVTExport
EQsource4 // SVTExport


EQsec6 // SVTExport
EQsource6 // SVTExport


EQsec7 // SVTExport
EQsource7 // SVTExport


SetOptions[SVTDecomposition,SVTPerturbationQ->True,GRToBuildingBlocksQ->True,ListMethod->"SamePerts",Verbose->True]


tmp=SVTDecomposition[EQmatter,order,{\[Mu]->a},Verbose->True];
% // Length


EQmatter20=tmp;
EQmatter20 // SVTExport


tmp=-tmp;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


EQsource8=-source8[LI[2]]-Evaluate[tmp //.pert_[LI[2],___]:>0];
EQsec8=-source8[LI[2]]+Evaluate[tmp //.pert_[LI[1],___]:>0];
EQsec8 // CollectPerts
EQsec8 //Length
EQsource8 //Length


EQsec8 //SVTExport
EQsource8 //SVTExport


tmp=SVTDecomposition[EQmatter,order,{\[Mu]->i},Verbose->True];
% // Length


EQmatter2i=tmp;
EQmatter2i // SVTExport


tmp=-tmp;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


tmpi=tmp;
tmpi // Length


{time,tmp}=Timing[Map[PD[-j]@# &,tmpi]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpij}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j]# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec9}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[metric\[Delta][j,k] # &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-PD[-i]@# &,EQsec9]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQsec10}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQsource9=-source9[LI[2]]-Evaluate[EQsec9//.pert_[LI[2],___]:>0];
EQsec9=-source9[LI[2]]+Evaluate[EQsec9//.pert_[LI[1],___]:>0];
EQsec9// CollectPerts
EQsec9//Length
EQsource9//Length


EQsource10=-source10[LI[2],-i]-Evaluate[EQsec10//.pert_[LI[2],___]:>0];
EQsec10=-source10[LI[2],-i]+Evaluate[EQsec10//.pert_[LI[1],___]:>0];
EQsec10// CollectPerts
EQsec10//Length
EQsource10//Length


EQsec9 //SVTExport
EQsource9 //SVTExport


EQsec10 //SVTExport
EQsource10 //SVTExport


order=3


SubBack[expr_] := Module[{tmp},
	tmp = expr //.Flatten[Solve[TimeDer[EQback2]==0,pprimehubbleC[]]];
	tmp = tmp //.Flatten[Solve[EQback3==0,primedensity[]]];
	tmp = tmp //.Flatten[Solve[EQback2==0,primehubbleC[]]];
	tmp = tmp //.Flatten[Solve[EQback1==0,Lambda]];
	tmp]


SetOptions[SVTDecomposition,Verbose->True,StoreResultQ->False,ListMethod->"SamePerts"]


tmp=EQmetric //.$StressEnergyDecomposition;
tmp=Listify[SVTPerturbation, tmp, {order}, ListMethod->"Part",PartLength->1,Verbose->True];
tmp // Length


tmp=tmp;
tmp=Listify[GRToBuildingBlocks, tmp, {CD,{ToMetric->False}}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=tmp//ContractMetric;
tmp=tmp//.RicciScalarCD[]:>RicciScalarCDP[];
tmp=tmp//.RicciCD[\[Mu]_,\[Nu]_]:>RicciCDP[\[Mu],\[Nu]];
tmp=tmp//.RiemannCD[\[Mu]_,\[Nu]_,\[Alpha]_,\[Beta]_]:>RiemannCDP[\[Mu],\[Nu],\[Alpha],\[Beta]];
tmp=tmp//.ChristoffelCD[\[Mu]_,\[Nu]_,\[Alpha]_]:>ChristoffelCDP[\[Mu],\[Nu],\[Alpha]];
EQmetrictmp=ToCanonical[tmp,UseMetricOnVBundle->{metric\[Delta]}] //SeparateMetric[];
EQmetrictmp // Length


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->a,\[Nu]->b},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric300=tmp;
EQmetric300 // SVTExport


{time,tmp}=Timing[Map[SubBack[-#/2/Mpl^2] &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQtource1=-source1[LI[3]]-Evaluate[tmp//.pert_[LI[3],___]:>0];
EQthird1=-source1[LI[3]]+Evaluate[tmp//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
EQthird1 // CollectPerts
EQthird1//Length
EQtource1//Length


EQthird1 // SVTExport
EQtource1 // SVTExport


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->a,\[Nu]->i},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric30i=tmp;
EQmetric30i // SVTExport


{time,tmp}=Timing[Map[SubBack[#/Mpl^2] &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


tmpi=tmp;
tmpi // Length


{time,tmp}=Timing[Map[PD[-j]@# &,tmpi]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpij}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j]# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird2}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[metric\[Delta][j,k] # &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-PD[-i]@# &,EQthird2]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird5}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQtource2=-source2[LI[3]]-Evaluate[EQthird2//.pert_[LI[3],___]:>0];
EQthird2=-source2[LI[3]]+Evaluate[EQthird2//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
CollectPerts[EQthird2,{},Factor]
EQthird2//Length
EQtource2//Length


EQtource5=-source5[LI[3],-i]-Evaluate[EQthird5//.pert_[LI[3],___]:>0];
EQthird5=-source5[LI[3],-i]+Evaluate[EQthird5//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
CollectPerts[EQthird5,{},Factor]
EQthird5//Length
EQtource5//Length


EQthird2 // SVTExport
EQtource2 // SVTExport


EQthird5 // SVTExport
EQtource5 // SVTExport


tmp=EQmetrictmp;
tmp=Listify[SplitAndExpand, tmp, {{\[Mu]->i,\[Nu]->j},Nsplits->1}, ListMethod->"Part",PartLength->10,Verbose->True];
tmp // Length


tmp=Listify[SVTExpand, tmp, {}, ListMethod->"SamePerts",Verbose->True];
tmp // Length


EQmetric3ij=tmp;
EQmetric3ij // SVTExport


{time,tmp}=Timing[Map[SubBack[#/2/Mpl^2] &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


tmpij=tmp;
tmpij // Length


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-l]@# &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijkl}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-m]@# &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijklm}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-n]@# &,tmpijklm]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijklmn}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,k] metric\[Delta][j,l] # &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,divdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j] metric\[Delta][k,l] # &,tmpijkl]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][j,k] metric\[Delta][l,m] # &,tmpijklm]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,lapdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-i]@# &,divdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,graddivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][k,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laplap}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,k] metric\[Delta][j,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,lapdivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j] metric\[Delta][k,l] metric\[Delta][m,n] # &,tmpijklmn]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,laplaptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-i]@PD[-j]@# &,laptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradgradlaptrace}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-j]@# &,graddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradgraddivdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-j]@# &,lapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,gradlapdiv}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,EQthird3}=Timing[Listify[SVTExpand,divdiv,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[-# &,laptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[3 # &,divdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird4}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[4 # &,lapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,graddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird6}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[4 # &,laplap]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 metric\[Delta][-i,-j] # &,lapdivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-2 metric\[Delta][-i,-j] # &,laplaptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 # &,gradgradlaptrace]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[2 # &,gradgraddivdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,gradlapdiv]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[# &,tmp]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-4 # &,Evaluate[gradlapdiv //.-i->-k //.-j->-i //.-k->-j]]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird7}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQtource3=-source3[LI[3]]-Evaluate[EQthird3//.pert_[LI[3],___]:>0];
EQthird3=-source3[LI[3]]+Evaluate[EQthird3//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
CollectPerts[EQthird3,{},Factor]
EQthird3//Length
EQtource3//Length


EQtource4=-source4[LI[3]]-Evaluate[EQthird4//.pert_[LI[3],___]:>0];
EQthird4=-source4[LI[3]]+Evaluate[EQthird4//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
CollectPerts[EQthird4,{},Factor]
EQthird4//Length
EQtource4//Length


EQtource6=-source6[LI[3],-i]-Evaluate[EQthird6//.pert_[LI[3],___]:>0];
EQthird6=-source6[LI[3],-i]+Evaluate[EQthird6//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
CollectPerts[EQthird6,{},Factor]
EQthird6//Length
EQtource6//Length


EQtource7=-source7[LI[3],-i,-j]-Evaluate[EQthird7//.pert_[LI[3],___]:>0];
EQthird7=-source7[LI[3],-i,-j]+Evaluate[EQthird7//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
CollectPerts[EQthird7,{},Factor]
EQthird7//Length
EQtource7//Length


EQthird3 // SVTExport
EQtource3 // SVTExport


EQthird4 // SVTExport
EQtource4 // SVTExport


EQthird6 // SVTExport
EQtource6 // SVTExport


EQthird7 // SVTExport
EQtource7 // SVTExport


SetOptions[SVTDecomposition,SVTPerturbationQ->True,GRToBuildingBlocksQ->True,ListMethod->"SamePerts",Verbose->True]


tmp=SVTDecomposition[EQmatter,order,{\[Mu]->a},Verbose->True];
% // Length


EQmatter30=tmp;
EQmatter30 // SVTExport


tmp=-tmp;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


EQtource8=-source8[LI[3]]-Evaluate[tmp //.pert_[LI[3],___]:>0];
EQthird8=-source8[LI[3]]+Evaluate[tmp //.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
EQthird8 // CollectPerts
EQthird8 //Length
EQtource8 //Length


EQthird8 //SVTExport
EQtource8 //SVTExport


tmp=SVTDecomposition[EQmatter,order,{\[Mu]->i},Verbose->True];
% // Length


EQmatter3i=tmp;
EQmatter3i // SVTExport


tmp=-tmp;
tmp=tmp // SubBack // Expand;
tmp=tmp // SVTExpand;
tmp // Length


tmpi=tmp;
tmpi // Length


{time,tmp}=Timing[Map[PD[-j]@# &,tmpi]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpij}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[PD[-k]@# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmpijk}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp}=Timing[Map[metric\[Delta][i,j]# &,tmpij]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird9}=Timing[Listify[SVTExpand,tmp,{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


{time,tmp1}=Timing[Map[metric\[Delta][j,k] # &,tmpijk]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,tmp2}=Timing[Map[-PD[-i]@# &,EQthird9]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];
{time,EQthird10}=Timing[Listify[SVTExpand,Expand[tmp1+tmp2],{},ListMethod->"SamePerts",Verbose->True]];
Print["Time: "<>ToString@%[[1]]<>" sec. Elements: "<>ToString@Length@%[[2]]];


EQtource9=-source9[LI[3]]-Evaluate[EQthird9//.pert_[LI[3],___]:>0];
EQthird9=-source9[LI[3]]+Evaluate[EQthird9//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
EQthird9// CollectPerts
EQthird9//Length
EQtource9//Length


EQtource10=-source10[LI[3],-i]-Evaluate[EQthird10//.pert_[LI[3],___]:>0];
EQthird10=-source10[LI[3],-i]+Evaluate[EQthird10//.pert_[LI[1],___]:>0//.pert_[LI[2],___]:>0];
EQthird10// CollectPerts
EQthird10//Length
EQtource10//Length


EQthird9 //SVTExport
EQtource9 //SVTExport


EQthird10 //SVTExport
EQtource10 //SVTExport



